{"version":3,"sources":["components/Login.module.css","components/utills/Preloader.module.css","api/login-api.tsx","redux/auth-reducer.tsx","components/utills/Preloader.tsx","components/Login.tsx","components/Profile.tsx","App.tsx","reportWebVitals.ts","redux/store.tsx","index.tsx"],"names":["module","exports","login","data","a","fetch","method","headers","body","JSON","stringify","res","json","authMe","token","loginThunk","createAsyncThunk","dispatch","rejectWithValue","changeIsLoader","isLoader","responseData","tokenType","accessToken","isLoggedIn","setError","error","setTimeout","toString","authMeThunk","name","email","authSlice","createSlice","initialState","reducers","state","action","payload","logOutClearState","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","Preloader","className","s","preloader","spinner","Login","useSelector","auth","useDispatch","formik","useFormik","initialValues","clientId","password","validate","values","errors","test","onSubmit","resetForm","to","errorSpan","r","container","main","handleSubmit","formWrap","touched","getFieldProps","placeholder","type","btnWrap","Profile","useEffect","onClick","App","exact","path","render","from","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e089f482.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__35EMk\",\"main\":\"Login_main__1O6TK\",\"formWrap\":\"Login_formWrap__mVFfX\",\"error\":\"Login_error__tge3D\",\"btnWrap\":\"Login_btnWrap__2_QPD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__2Kc8i\",\"spinner\":\"Preloader_spinner__20dkH\",\"spin\":\"Preloader_spin__3PNso\"};","export type LoginParamsType = {\r\n    clientId: number\r\n    email: string\r\n    password: string\r\n}\r\nexport type authMeParamsType = {\r\n    tokenType: string,\r\n    accessToken: string\r\n}\r\nexport type LoginResponseType = {\r\n    data: {\r\n        tokenType: string,\r\n        expiresAt: string,\r\n        accessToken: string,\r\n        refreshToken: string\r\n    }\r\n}\r\nexport type AuthResponseType = {\r\n    data: {\r\n        name: string\r\n        email: string\r\n    }\r\n}\r\nexport const login = async (data: LoginParamsType): Promise<LoginResponseType> => {\r\n    const res = await fetch('https://tager.dev.ozitag.com/api/auth/user', {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json', 'Accept': 'application/json'},\r\n        body: JSON.stringify(data)\r\n    })\r\n    return await res.json()\r\n}\r\nexport const authMe = async (token:string): Promise<AuthResponseType> => {\r\n    const res = await fetch('https://tager.dev.ozitag.com/api/tager/user/profile', {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`,\r\n            'Accept': 'application/json'\r\n        },\r\n    })\r\n    return await res.json()\r\n}\r\n","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {authMe, login, LoginParamsType} from \"../api/login-api\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    isLoader: false,\r\n    tokenType: '',\r\n    accessToken: '',\r\n    name: '',\r\n    email: '',\r\n    error: ''\r\n}\r\nexport const loginThunk = createAsyncThunk(\r\n    'auth/loginThunk',\r\n    async (data: LoginParamsType, {dispatch, rejectWithValue}) => {\r\n        try {\r\n            dispatch(changeIsLoader({isLoader: true}))\r\n            const responseData = await login(data)\r\n            return {\r\n                tokenType: responseData.data.tokenType,\r\n                accessToken: responseData.data.accessToken, isLoggedIn: true\r\n            }\r\n        } catch (e) {\r\n            dispatch(setError({error: 'Something wrong'}))\r\n            setTimeout(() => {\r\n                dispatch(setError({error: ''}))\r\n            },3000)\r\n            return rejectWithValue(e.toString())\r\n        }\r\n        finally {\r\n            dispatch(changeIsLoader({isLoader: false}))\r\n        }\r\n    }\r\n)\r\nexport const authMeThunk = createAsyncThunk(\r\n    'auth/authMeThunk',\r\n    async (token: string, {dispatch, rejectWithValue}) => {\r\n        try {\r\n            dispatch(changeIsLoader({isLoader: true}))\r\n            const responseData = await authMe(token)\r\n            return {name: responseData.data.name, email: responseData.data.email, isLoggedIn: true}\r\n        } catch (e) {\r\n            dispatch(setError({error: 'Something wrong'}))\r\n            setTimeout(() => {\r\n                dispatch(setError({error: ''}))\r\n            },3000)\r\n            return rejectWithValue(e.toString())\r\n        }\r\n        finally {\r\n            dispatch(changeIsLoader({isLoader: false}))\r\n        }\r\n    }\r\n)\r\nexport type LogOutType = {\r\n    name:string\r\n    email:string\r\n    accessToken:string\r\n    tokenType:string\r\n    isLoggedIn:boolean\r\n}\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        setError(state, action: PayloadAction<{ error: string }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        changeIsLoader(state, action: PayloadAction<{ isLoader: boolean }>) {\r\n            state.isLoader = action.payload.isLoader\r\n        },\r\n        logOutClearState(state, action: PayloadAction<LogOutType>) {\r\n            return {...state, ...action.payload}\r\n        }\r\n\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(loginThunk.fulfilled, (state, action) => {\r\n            return {...state, ...action.payload}\r\n        })\r\n        builder.addCase(authMeThunk.fulfilled, (state, action) => {\r\n            return {...state, ...action.payload}\r\n        })\r\n    }\r\n})\r\nexport const authReducer = authSlice.reducer\r\nexport const {setError, changeIsLoader, logOutClearState} = authSlice.actions\r\n","import React from 'react'\r\nimport s from './Preloader.module.css'\r\n\r\nexport const Preloader = () => {\r\n    return <div className={s.preloader}>\r\n        <div className={s.spinner}/>\r\n    </div>\r\n}\r\n","import {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginThunk} from \"../redux/auth-reducer\";\r\nimport React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../redux/store\";\r\nimport r from \"./Login.module.css\"\r\nimport {Preloader} from \"./utills/Preloader\";\r\n\r\ntype FormErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const error = useSelector<AppRootStateType, string>(state => state.auth.error)\r\n    const isLoader = useSelector<AppRootStateType, boolean>(state => state.auth.isLoader)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            clientId: 1,\r\n            email: '',\r\n            password: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormErrorType = {};\r\n            if (!values.email || !values.password) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginThunk(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/Profile'}/>\r\n    }\r\n    const errorSpan = (error: string) => {\r\n        return <span className={r.error}>{error}</span>\r\n    }\r\n    return <div className={r.container}>\r\n        <div className={r.main}>\r\n            <h3>OZITAG Company</h3>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div className={r.formWrap}>\r\n                    <div>\r\n                        {formik.errors.email && formik.touched.email ? errorSpan(formik.errors.email)\r\n                            : error && errorSpan(error)}\r\n                        <input\r\n                            {...formik.getFieldProps('email')}\r\n                            placeholder={'email'}/>\r\n                    </div>\r\n                    <div>\r\n                        {formik.errors.password ? errorSpan(formik.errors.password) : error && errorSpan(error)}\r\n                        <input\r\n                            {...formik.getFieldProps('password')}\r\n                            placeholder={'password'} type={'password'}/>\r\n                    </div>\r\n                    <div className={r.btnWrap}>\r\n                        {isLoader ? <div><Preloader/></div> :\r\n                            <button type=\"submit\"><span>LOG IN</span></button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../redux/store\";\r\nimport {authMeThunk, logOutClearState, LogOutType} from \"../redux/auth-reducer\";\r\nimport r from \"./Login.module.css\";\r\nimport {Preloader} from \"./utills/Preloader\";\r\n\r\nexport const Profile = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const token = useSelector<AppRootStateType, string>(state => state.auth.accessToken)\r\n    const name = useSelector<AppRootStateType, string>(state => state.auth.name)\r\n    const email = useSelector<AppRootStateType, string>(state => state.auth.email)\r\n    const isLoader = useSelector<AppRootStateType, boolean>(state => state.auth.isLoader)\r\n    const logOut = () => {\r\n        const clearStateObj:LogOutType = {\r\n            accessToken:'',\r\n            email:'',\r\n            isLoggedIn:false,\r\n            name:'',\r\n            tokenType:''\r\n        }\r\n        dispatch(logOutClearState(clearStateObj))\r\n    }\r\n    useEffect(() => {\r\n        if(token){\r\n            dispatch(authMeThunk(token))\r\n        }\r\n    }, [dispatch, token])\r\n    if(!isLoggedIn){\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <div className={r.container}>\r\n        <div className={r.main}>\r\n            <h3>OZITAG Company</h3>\r\n            {isLoader ? <Preloader/> :\r\n                <div>\r\n                    <div className={r.formWrap}>\r\n                        <div>\r\n                            <h4>Name:</h4>\r\n                            <span>{name}</span>\r\n                        </div>\r\n                        <div>\r\n                            <h4>Email</h4>\r\n                            <span>email: {email}</span>\r\n                        </div>\r\n                        <div className={r.btnWrap}>\r\n                            <button onClick={logOut} type=\"button\"><span>LOG OUT</span></button>\r\n                        </div>\r\n                    </div>\r\n                </div>}\r\n        </div>\r\n    </div>\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {Login} from \"./components/Login\";\nimport {Profile} from \"./components/Profile\";\nimport {BrowserRouter, Redirect, Route, Switch} from \"react-router-dom\";\n\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <div className=\"App\">\n                <Switch>\n                    <Route exact path={'/login'} render={() => <Login/>}/>\n                    <Route exact path={'/Profile'} render={() => <Profile/>}/>\n                    <Redirect from={'/'} to={'/login'}/>\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\n                    <Redirect from={'*'} to={'/404'}/>\n                </Switch>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers} from \"redux\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport thunk from \"redux-thunk\";\r\nimport {authReducer} from \"./auth-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer\r\n})\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware()\r\n        .prepend(thunk)\r\n})\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from \"./redux/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}